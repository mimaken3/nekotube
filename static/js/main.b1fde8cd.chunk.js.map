{"version":3,"sources":["components/Header/Header.js","components/Body/Body.js","components/Video/Item/Item.js","components/Video/List/List.js","components/Video/Video.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","keyword","onInputChangeHandler","event","console","log","target","value","setState","props","onKeywordChanged","className","style","fontFamily","onChange","this","type","placeholder","aria-label","Component","Body","children","Item","onClick","onVideoClicked","video","src","snippet","thumbnails","default","url","title","List","Items","videos","map","selectedVideo","key","id","videoId","Video","videoURL","description","YOUTUBE_API_KEY","App","onVideoClickedHandler","onKeywordChangedHandler","newTerm","replace","YSearch","term","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1fde8cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n  state = {keyword: ''};\n\n  // valueを取得するためのevent handler\n  onInputChangeHandler = (event) => {\n    console.log(\"event : \" + event);\n    console.log(\"event.target.value : \" + event.target.value);\n\n     this.setState({keyword: event.target.value});\n     this.props.onKeywordChanged(event.target.value);\n  }\n   \n  render(){\n\nconst  fontStyle = {\n  fontFamily: 'Mansalva'\n}\n\n    return(\n    <nav className=\"navbar navbar-expand\n                    navbar-light bg-light\n                    mb-3 p-3\">\n        <h2 className=\"mb-0\" >\n          <span className=\"bg-warning text-white p-2 mr-2\">楽</span>\n          <span className=\"d-none d-md-inline\"\n          style={fontStyle}\n          >RakusTube</span>\n        </h2>\n        <form className=\"form-group my-2 my-lg-0 ml-sm-2 \">\n          <input\n            onChange={this.onInputChangeHandler} value={this.state.keyword}\n            className=\"form-control form-control-lg mr-sm-2\" type=\"text\" placeholder=\"検索...\" aria-label=\"検索...\" />\n        </form>\n      </nav>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react'\n\nconst Body = (props) => {\n  return(\n    <div className=\"container\">\n    <div className=\"row\">\n    {props.children}\n    </div>\n    </div>\n  );\n};\n\nexport default Body;\n","import React from 'react';\n\nconst Item = (props) => {\n  return(\n    <li className=\"list-group-item\"\n    onClick={() => props.onVideoClicked(props.video)}\n    > \n    <div className=\"video-list media\">\n    <div className=\"media-left\">\n    <img className=\"mr-3\" src={props.video.snippet.thumbnails.default.url}/>\n    </div>\n    <div className=\"media-body\">\n    <h5 className=\"media-heading\">{props.video.snippet.title}</h5>\n    </div>\n    </div>\n    </li>\n  );\n};\n\nexport default Item;\n\n","import React from 'react'\nimport Item from '../Item/Item';\n\nconst List = (props) => {\n\n  const Items = props.videos.map((video) => {\n    if (props.selectedVideo !== video) {\n      return (\n        <Item\n          video={video}\n          key={video.id.videoId}\n          onVideoClicked={props.onVideoClicked}\n        />\n      );\n    }\n  });\n\n  return (\n    <ul className=\"col-md-4 list-group\">\n      {Items}\n    </ul>\n  );\n}\n\nexport default List;\n","import React from 'react';\n\nconst Video = (props) => {\nif(!props.video){\n    return(\n        <div className=\"video col-md-8\">\n            動画を読込中です\n        </div>\n    );\n}\n\n// データが取得できていないときは、ここから下のコードが実行されません\nconst videoURL = 'https://www.youtube.com/embed/' + props.video.id.videoId;\n    return(\n        <div className=\"video col-md-8\">\n            <div className=\"embed-responsive embed-responsive-16by9\">      \n            <iframe className=\"embed-responsive-item\" src={videoURL}></iframe>  \n            </div>\n            <div className=\"info\">    \n            <h2>{props.video.snippet.title}</h2>        \n            <p>{props.video.snippet.description}</p>\n            </div>\n        </div>\n        );    \n}\n\nexport default Video;","import React, { Component } from 'react';\nimport './App.css';\nimport YSearch from 'youtube-api-search';\n\nimport Header from './components/Header/Header';\nimport Body from './components/Body/Body';\nimport List from './components/Video/List/List';\nimport Video from './components/Video/Video';\n\nconst YOUTUBE_API_KEY = 'AIzaSyC9cU_nwYbKPKHLSOlNKbtn5AkSUGpXrs8';\n\nclass App extends Component {\n  // stateの初期化。取得するデータは配列なので、[]と設定\n  state = {\n    videos: [],\n    selectedVideo: null\n  }\n\n  // APIリクエストを行う\n  componentDidMount() {\n    console.log(\"componentDidMount\");\n    YSearch({ key: YOUTUBE_API_KEY, term: 'ラクスパートナーズ' }, (data) => {\n      this.setState({ videos: data, selectedVideo: data[2] });\n    });\n  }\n\n  // clickされたら、その動画の情報を取ってきて\n  onVideoClickedHandler = (video) => {\n    console.log(\"onVideoClickHandler\");\n    console.log(\"video : \" + video);\n    this.setState({ selectedVideo: video })\n  }\n\n  // event handler を挿入\n  onKeywordChangedHandler = (keyword) => {\n    console.log(\"onKeywordChangedHandler\");\n    console.log(\"keyword : \" + keyword);\n    // 空白を除去\n    var newTerm = keyword.replace(/\\s+/g, \"\");\n    \n    if (newTerm === '') {\n      newTerm = 'ラクスパートナーズ';\n    }\n    YSearch({ key: YOUTUBE_API_KEY, term: newTerm }, (data) => {\n      this.setState({videos: data, selectedVideo: data[0]})\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header onKeywordChanged={this.onKeywordChangedHandler} />\n        <Body>\n          <Video video={this.state.selectedVideo} />\n          <List\n            videos={this.state.videos}\n            onVideoClicked={this.onVideoClickedHandler}\n            selectedVideo={this.state.selectedVideo}\n          />\n        </Body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}